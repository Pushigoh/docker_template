#!/bin/bash
#Creates directory with Docker build/run scripts for new container

#Check if $1 argument was passed in
if [ -z "$1" ]
then
    echo 'Usage: buildContainerShell $containerName [$baseImage]'
    exit
fi

imagedir="$(pwd)/${1}"
#Create base files
mkdir $imagedir
touch $imagedir/Dockerfile
touch $imagedir/build.sh
touch $imagedir/run.sh
mkdir $imagedir/storage

#create Dockerfile
##If $2 is null, default to ubuntu:latest
if [ -z "$2" ]
then
    echo "FROM ubuntu:latest" >> "$imagedir/Dockerfile"
else
    echo "FROM $2" >> "$imagedir/Dockerfile"
fi
##Update package manager, install basic utilities, create storage volume
echo "RUN apt-get update && apt-get upgrade -y" >> $imagedir/Dockerfile
echo "RUN apt-get install redis-tools -y" >> $imagedir/Dockerfile
echo "RUN apt-get install vim -y" >> $imagedir/Dockerfile
echo "RUN apt-get install git -y" >> $imagedir/Dockerfile
echo "RUN mkdir /storage" >> $imagedir/Dockerfile

#Create build.sh
echo "docker build -t $1 ." >> $imagedir/build.sh

#Create run.sh
##Runs with interactive shell, removes container on exit
###Runs detached if passed -d
cat >$imagedir/run.sh << EOL
re='^[0-9]+$'
if [ "\$1" = '-d' ]
then
  docker run -v $imagedir/storage:/storage -d $1 
elif [[ "\$1" =~ \$re ]]
then
  for i in {1..\$1}
    do
      docker run -d $1 
    done
else
  docker run -v $imagedir/storage:/storage -it --rm $1 
fi
EOL

#Grant permissions to execute run.sh && build.sh
chmod +x $imagedir/run.sh && chmod +x $imagedir/build.sh

